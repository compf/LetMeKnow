def convert_to_message(array:bytearray,class_name:str,key_provider:KeyProvider)->dict:
    BASE_PATH= os.path.join(find_git_root(),"app/shared/")
    with open(BASE_PATH+class_name+".xml") as f:
        doc=parse(f)
        mapper=dict()
        root=doc.documentElement
        prefix=root.getAttribute("typePrefix") if root.hasAttribute("typePrefix") else ""
    convert_to_message_rec(array,0,key_provider,mapper,root,prefix)
    return mapper
def convert_to_message_rec(array:bytearray,offset:int,key_provider:KeyProvider,mapper:dict,root:Element,prefix:str):
    curr_offset=offset
    format_string=prefix
    for n in root.childNodes:
        if n.nodeType==Node.ELEMENT_NODE and n.tagName=="single":
            format_string+=n.getAttribute("type")
    objects=struct.unpack(format_string,array[offset:offset+struct.calcsize(format_string)])
    counter=0
    for n in root.childNodes:
        if n.nodeType==Node.ELEMENT_NODE and n.tagName=="single":
            mapper[n.getAttribute("id")]=objects[counter]
            counter+=1
    curr_offset=offset+struct.calcsize(format_string)
    for ele in root.getElementsByTagName("block"):
        decryption_key_id=get_encyrption_decryption_keyId(ele)[1]
        cipher=key_provider.get_cipher(decryption_key_id)
        iv=bytearray(cipher.get_block_size())
        size_type=ele.getAttribute("sizeType")
        if ele.getAttribute("mode")!="plain":
            iv=array[curr_offset:curr_offset+len(iv)]
            curr_offset+=len(iv)
        size=struct.unpack(size_type,array[curr_offset:curr_offset+struct.calcsize(size_type)])[0]
        curr_offset+=struct.calcsize(size_type)
        block_bytearray=array[curr_offset:curr_offset+size]
        curr_offset+=size
    if root.hasAttribute("hashType"):
        hash_bytearray=array[curr_offset:curr_offset+get_hash_size(root.getAttribute("hashType"))]
        processed_count=curr_offset-offset
        compare_bytearray=array[offset:curr_offset]
        hashed=hash(compare_bytearray,root.getAttribute("hashType"))
        hash_bytearray=bytes(hash_bytearray)
        if hashed!=(hash_bytearray):
            print(bytes(array))
            print("hallo",array[curr_offset])
            raise ValueError("Hash not equal")
        if ele.getAttribute("mode")!="plain":
            curr_offset-=len(block_bytearray)
            block_bytearray=cipher.decrypt(block_bytearray,iv,ele.getAttribute("mode"),decryption_key_id,key_provider,mapper)
            array[curr_offset:curr_offset+len(block_bytearray)]=block_bytearray
        convert_to_message_rec(array,curr_offset,key_provider,mapper,ele,prefix)




#########################################################################################################################


def convert_to_bytes(mapper:dict,class_name:str,key_provider:KeyProvider)->bytearray:
    BASE_PATH= os.path.join(find_git_root(),"app/shared/")
    with open(BASE_PATH+class_name+".xml") as f:
        doc=parse(f)
        root=doc.documentElement
        prefix=root.getAttribute("typePrefix") if root.hasAttribute("typePrefix") else ""
    return convert_to_bytes_rec(mapper,root,key_provider,prefix)



def convert_to_bytes_rec(mapper,root,key_provider,prefix:str):
    objects=[]
    result=bytearray()
    format_string=prefix
    for ele in root.childNodes:
        if ele.nodeType==Node.ELEMENT_NODE:
            if ele.tagName=="single":
                objects.append(mapper[ele.getAttribute("id")])
                format_string+=ele.getAttribute("type")
    result+=struct.pack(format_string,*objects)
    for ele in root.getElementsByTagName("block"):
        block_bytearray=convert_to_bytes_rec(mapper,ele,key_provider,prefix)
        size_type=ele.getAttribute("sizeType")
        if ele.getAttribute("mode")!="plain":
            encryption_key_id=get_encyrption_decryption_keyId(ele)[0]
            cipher=key_provider.get_cipher(encryption_key_id)
            encrypted=cipher.encrypt(block_bytearray,ele.getAttribute("mode"),encryption_key_id,key_provider,mapper)
            block_bytearray=encrypted[0]
            result+=encrypted[1]
        result+=struct.pack(size_type,len(block_bytearray))
        result+=block_bytearray
        if root.hasAttribute("hashType"):
            result+=hash(result,root.getAttribute("hashType"))
    return result






